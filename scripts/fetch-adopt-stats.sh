#!/bin/bash

# fetch-adopt-stats.sh - Python Dependency Manager Adoption Statistics
#
# Updated on 2025-07-26 by @KemingHe
# 
# Purpose: Fetch GitHub statistics for Python dependency manager adoption
# Uses GitHub CLI to search for distinctive file patterns per dependency manager
# Outputs adoption statistics and percentages for presentation use

# Exit immediately if a command exits with a non-zero status
set -e

# --- Configuration ---
SEARCH_DELAY=2  # Seconds between API calls to avoid rate limiting

# Search queries for each dependency manager (based on distinctive file content)
QUERY_TOTAL="language:python"
QUERY_PIP="\"==\" extension:txt filename:requirements"
QUERY_POETRY="\"# This file is automatically @generated by Poetry\" \"[[package]]\""
QUERY_CONDA="\"channels:\" \"dependencies:\" \"conda-forge\" language:yaml"
QUERY_UV="\"version = 1\" \"requires-python\" language:toml"

# --- Logging ---
log_info() {
    echo "[INFO] $1"
}

log_success() {
    echo "[SUCCESS] $1"
}

log_error() {
    echo "[ERROR] $1" >&2
}

# --- Dependencies Check ---
check_dependencies() {
    log_info "Checking dependencies..."
    
    if ! command -v gh >/dev/null 2>&1; then
        log_error "GitHub CLI (gh) not found. Please install: https://cli.github.com/"
        exit 1
    fi
    
    if ! command -v jq >/dev/null 2>&1; then
        log_error "jq not found. Please install jq for JSON processing"
        exit 1
    fi
    
    log_success "All dependencies available"
}

# --- Core Functions ---
# Fetch count from GitHub API with error handling
fetch_count() {
    local description="$1"
    local query="$2"
    local endpoint="$3"
    
    local result
    result=$(gh api "search/$endpoint" --method GET \
        --field q="$query" --field per_page=1 2>/dev/null | \
        jq '.total_count' 2>/dev/null)
    
    if [ -z "$result" ] || [ "$result" = "null" ]; then
        log_error "Failed to fetch data for $description"
        log_error "Query: $query"
        return 1
    fi
    
    # Rate limiting delay
    if [ "$SEARCH_DELAY" -gt 0 ]; then
        sleep "$SEARCH_DELAY"
    fi
    
    echo "$result"
}

# Calculate percentage with 3 decimal places
calculate_percentage() {
    local count="$1"
    local total="$2"
    awk "BEGIN { printf \"%.3f\", ($count / $total) * 100 }"
}

# Fetch all statistics
fetch_statistics() {
    log_info "Starting Python dependency manager adoption analysis"
    echo ""
    
    # Fetch baseline
    log_info "Step 1/5: Fetching baseline Python repositories"
    local total
    total=$(fetch_count "Total Python repositories" "$QUERY_TOTAL" "repositories")
    log_success "Total Python repositories: $total"
    echo ""
    
    # Fetch dependency manager counts
    log_info "Step 2/5: Fetching pip adoption"
    local pip_count
    pip_count=$(fetch_count "Pip (requirements.txt)" "$QUERY_PIP" "code")
    log_success "Pip repositories: $pip_count"
    echo ""
    
    log_info "Step 3/5: Fetching Poetry adoption" 
    local poetry_count
    poetry_count=$(fetch_count "Poetry (poetry.lock)" "$QUERY_POETRY" "code")
    log_success "Poetry repositories: $poetry_count"
    echo ""
    
    log_info "Step 4/5: Fetching Conda adoption"
    local conda_count  
    conda_count=$(fetch_count "Conda (environment.yml)" "$QUERY_CONDA" "code")
    log_success "Conda repositories: $conda_count"
    echo ""
    
    log_info "Step 5/5: Fetching UV adoption"
    local uv_count
    uv_count=$(fetch_count "UV (uv.lock)" "$QUERY_UV" "code")
    log_success "UV repositories: $uv_count"
    echo ""
    
    # Store results in global variables for display
    TOTAL_COUNT="$total"
    PIP_COUNT="$pip_count"
    POETRY_COUNT="$poetry_count" 
    CONDA_COUNT="$conda_count"
    UV_COUNT="$uv_count"
}

# Display results in formatted table
display_results() {
    log_success "Analysis complete! Displaying results:"
    echo ""
    echo "üìà Python Dependency Manager Adoption Statistics"
    echo "================================================="
    printf "%-10s %12s %8s\n" "Tool" "Count" "Share"
    printf "%-10s %12s %8s\n" "----" "-----" "-----"
    printf "%-10s %12d %7s%%\n" "Total" "$TOTAL_COUNT" "100.000"
    printf "%-10s %12d %7s%%\n" "Pip" "$PIP_COUNT" "$(calculate_percentage "$PIP_COUNT" "$TOTAL_COUNT")"
    printf "%-10s %12d %7s%%\n" "Poetry" "$POETRY_COUNT" "$(calculate_percentage "$POETRY_COUNT" "$TOTAL_COUNT")" 
    printf "%-10s %12d %7s%%\n" "Conda" "$CONDA_COUNT" "$(calculate_percentage "$CONDA_COUNT" "$TOTAL_COUNT")"
    printf "%-10s %12d %7s%%\n" "UV" "$UV_COUNT" "$(calculate_percentage "$UV_COUNT" "$TOTAL_COUNT")"
    echo ""
    
    # Calculate combined coverage of major tools
    local managed_total=$((PIP_COUNT + POETRY_COUNT + CONDA_COUNT + UV_COUNT))
    local coverage_pct
    coverage_pct=$(calculate_percentage "$managed_total" "$TOTAL_COUNT")
    
    echo "üéØ Key Insight: ${coverage_pct}% of Python repos use the four major dependency managers (pip, Poetry, Conda, UV)"
    echo "(Note: Other tools like pixi, pdm, pipenv exist but were not measured in this analysis)"
}

# Main execution function
main() {
    echo "üîç Python Dependency Manager Adoption Analysis"
    echo "=============================================="
    echo ""
    
    check_dependencies
    echo ""
    
    fetch_statistics
    display_results
    
    echo ""
    log_success "Statistics collection completed successfully!"
    log_info "Search date: $(date +%Y-%m-%d)"
}

# Run main function with all arguments
main "$@"
